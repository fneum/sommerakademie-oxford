Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
n.optimize(solver_name=SOLVER, log_to_console=False)
------------------

----- stderr -----
INFO:linopy.model: Solve problem using Gurobi solver
------------------

[31m---------------------------------------------------------------------------[39m
[31mAssertionError[39m                            Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[11][39m[32m, line 1[39m
[32m----> [39m[32m1[39m [43mn[49m[43m.[49m[43moptimize[49m[43m([49m[43msolver_name[49m[43m=[49m[43mSOLVER[49m[43m,[49m[43m [49m[43mlog_to_console[49m[43m=[49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/pypsa/optimization/optimize.py:383[39m, in [36mOptimizationAccessor.__call__[39m[34m(self, snapshots, multi_investment_periods, transmission_losses, linearized_unit_commitment, model_kwargs, extra_functionality, assign_all_duals, solver_name, solver_options, compute_infeasibilities, **kwargs)[39m
[32m    381[39m [38;5;28;01mif[39;00m extra_functionality:
[32m    382[39m     extra_functionality([38;5;28mself[39m._n, sns)
[32m--> [39m[32m383[39m status, condition = [43mm[49m[43m.[49m[43msolve[49m[43m([49m[43msolver_name[49m[43m=[49m[43msolver_name[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43msolver_options[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m
[32m    385[39m [38;5;28;01mif[39;00m status == [33m"[39m[33mok[39m[33m"[39m:
[32m    386[39m     [38;5;28mself[39m._n.optimize.assign_solution()

[36mFile [39m[32m/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/linopy/model.py:1176[39m, in [36mModel.solve[39m[34m(self, solver_name, io_api, explicit_coordinate_names, problem_fn, solution_fn, log_fn, basis_fn, warmstart_fn, keep_files, env, sanitize_zeros, sanitize_infinities, slice_size, remote, progress, **solver_options)[39m
[32m   1173[39m     solver_name = available_solvers[[32m0[39m]
[32m   1175[39m logger.info([33mf[39m[33m"[39m[33m Solve problem using [39m[38;5;132;01m{[39;00msolver_name.title()[38;5;132;01m}[39;00m[33m solver[39m[33m"[39m)
[32m-> [39m[32m1176[39m [38;5;28;01massert[39;00m solver_name [38;5;129;01min[39;00m available_solvers, [33mf[39m[33m"[39m[33mSolver [39m[38;5;132;01m{[39;00msolver_name[38;5;132;01m}[39;00m[33m not installed[39m[33m"[39m
[32m   1178[39m [38;5;66;03m# reset result[39;00m
[32m   1179[39m [38;5;28mself[39m.reset_solution()

[31mAssertionError[39m: Solver gurobi not installed

